$themes: (
  light: (
    backgroundLight: #fff,
    backgroundDark: #f7f7f8,
    textColor: #fff,
    textDark: #000,
    textLight: #919394,
    contentColor: #b9baba,  
    iconColor: #000,
  ),
  dark: (
    backgroundLight: #131b1f,
    backgroundDark: #000,
    textColor: #fff,
    textDark: #fff,
    textLight: #b9baba,
    iconColor: #fff,
  ),
);

$color-schemes: (
  scheme-default: (
    backgroundColor: #00b4ff,
  ),
  scheme-cs1: (
    backgroundColor: #e68a00,
  )
);

// @mixin customize($arg: theme) {
//   $array: $themes;
//   $prefix: theme;

//   @if ($arg == theme) {
//     $array: $themes;
//     $prefix: theme;
//   } @else {
//     $array: $color-schemes;
//     $prefix: color;
//   }

//   @each $theme, $map in $array {
//     //.#{$prefix}-#{$theme} & {
//       .theme-#{$theme} & {
//       $array-map: () !global;
//       @each $key, $submap in $map {
//         $value: map-get(map-get($array, $theme), '#{$key}');
//         $array-map: map-merge($array-map, ($key: $value)) !global;
//       }

//       @content;
//       $array-map: null !global;
//     }
//   }
// }

// @function getValue($key) {
//   @return map-get($array-map, $key);
// }

// @mixin theme-aware($key, $color) {
//     @each $theme-name, $theme-color in $themes {
//         .theme-#{$theme-name} & {
            
//             #{$key}: map-get(map-get($themes, $theme-name), $color)
//         }
//     }
// }

@mixin themed() {
    @each $theme, $map in $themes {
      .theme-#{$theme} & {
        $theme-map: () !global;
        @each $key, $submap in $map {
          $value: map-get(map-get($themes, $theme), '#{$key}');
          $theme-map: map-merge($theme-map, ($key: $value)) !global;
        }
        @content;
        $theme-map: null !global;
      }
    }
  }
  
  @function t($key) {
    @return map-get($theme-map, $key);
  }